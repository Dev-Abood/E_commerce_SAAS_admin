// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// note(prisma)-4
// define your data models

model Stores {
    id         String      @id @default(uuid())
    name       String
    userId     String
    billboards Billboard[] @relation("StoreToBillboard")
    categories Category[]  @relation("StoreToCategory")
    sizes      Size[]      @relation("StoreToSize")
    colors     Color[]     @relation("StoreToColor")
    products   Product[]   @relation("StoreToProduct")
    orders Order[] @relation("StoreToOrder")
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
}

// note(prisma)-5
// npx prisma generate
// npx prisma db push

model Billboard {
    id         String     @id @default(uuid())
    storeId    String
    store      Stores     @relation("StoreToBillboard", fields: [storeId], references: [id])
    categories Category[]
    label      String
    imageUrl   String
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt

    @@index([storeId])
}

model Category {
    id          String   @id @default(uuid())
    storeId     String
    billboardId String
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    store     Stores    @relation("StoreToCategory", fields: [storeId], references: [id])
    billboard Billboard @relation(fields: [billboardId], references: [id])
    product   Product[] @relation("CategoryToProduct")

    @@index([storeId])
    @@index([billboardId])
}

model Size {
    id        String   @id @default(uuid())
    storeId   String
    name      String
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    store   Stores    @relation("StoreToSize", fields: [storeId], references: [id])
    product Product[] @relation("SizeToProduct")

    @@index([storeId])
}

model Color {
    id        String   @id @default(uuid())
    storeId   String
    name      String
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    store   Stores    @relation("StoreToColor", fields: [storeId], references: [id])
    product Product[]

    @@index([storeId])
}

model Image {
    id        String   @id @default(uuid())
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    url       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
}

model Product {
    id         String   @id @default(uuid())
    storeId    String
    stores     Stores   @relation("StoreToProduct", fields: [storeId], references: [id])
    categoryId String
    category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
    name       String
    price      Decimal
    isFeatured Boolean  @default(false)
    isArchived Boolean  @default(false)
    sizeId     String
    size       Size     @relation("SizeToProduct", fields: [sizeId], references: [id])
    colorId    String
    color      Color    @relation(fields: [colorId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    image      Image[]
    orderItems OrderItem[]

    @@index([storeId])
    @@index([sizeId])
    @@index([colorId])
    @@index([categoryId])
}

model Order {
        id String @id @default(uuid())
        storeId String
        store Stores @relation("StoreToOrder", fields: [storeId], references: [id])
        orderItems OrderItem[]
        isPaid Boolean @default(false)
        phone String @default("")
        address String @default("")
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt

        @@index([storeId])
    }

model OrderItem {
        id String @id @default(uuid())
        orderId String
        order Order @relation(fields: [orderId], references: [id])
        productId String
        product Product @relation(fields: [productId], references: [id])

        @@index([orderId])
        @@index([productId])
    }
